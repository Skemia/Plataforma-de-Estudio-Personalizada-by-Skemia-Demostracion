<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skemia - Herramienta Educativa Integrada</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* Estilos personalizados y utilidades de Tailwind */
        body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }
        .page-content {
            display: none; /* Ocultar todas las páginas por defecto */
        }
        .page-content.active {
            display: block; /* Mostrar solo la página activa */
        }
        
        /* Estilos para el efecto de volteo 3D de la flashcard */
        .perspective-1000 { perspective: 1000px; }
        .transform-style-3d { transform-style: preserve-3d; }
        .backface-hidden { backface-visibility: hidden; -webkit-backface-visibility: hidden; }
        .rotate-y-180 { transform: rotateY(180deg); }

        /* Estilo para la barra de progreso discreta */
        .progress-bar-container {
            @apply w-full bg-gray-200 rounded-full h-2 overflow-hidden;
        }

        .progress-bar {
            @apply bg-purple-700 h-2 rounded-full transition-all duration-300 ease-in-out;
        }
        /* Estilo para el botón de shuffle activo */
        .shuffle-btn.active {
            @apply bg-brand-accent text-white;
        }
        .multi-select-dropdown::-webkit-scrollbar {
            width: 8px;
        }
        .multi-select-dropdown::-webkit-scrollbar-thumb {
            background-color: #ccc;
            border-radius: 4px;
        }
    </style>
    <script>
        // Configuración de Tailwind para que coincida con el diseño
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'neutral-bg': '#f9f9f9',
                        'neutral-card': '#ffffff',
                        'neutral-border': '#e5e5e5',
                        'text-primary': '#1a1a1a',
                        'text-secondary': '#666666',
                        'brand-accent': '#5F476B',
                        'feedback-correct': '#22c55e',
                        'feedback-incorrect': '#ef4444',
                    },
                },
            },
        }
    </script>
</head>
<body class="bg-neutral-bg text-text-primary min-h-screen flex flex-col">

    <header class="bg-neutral-card border-b border-neutral-border sticky top-0 z-10">
        <nav class="container mx-auto px-6 py-4 flex justify-between items-center">
            <a href="#" class="text-xl font-bold text-brand-accent" data-page="home">Skemia</a>
            <div class="flex items-center space-x-4 sm:space-x-6 text-text-secondary">
                <a href="#" class="hover:text-text-primary" data-page="flashcards">Flashcards</a>
                <a href="#" class="hover:text-text-primary" data-page="quizzes">Quizzes</a>
                <a href="#" class="hover:text-text-primary" data-page="mindmap">Mapas Mentales</a>
                <a href="#" class="hover:text-text-primary" data-page="audios">Audios</a>
                <a href="#" class="hover:text-text-primary" data-page="report">Informes</a>
                <a href="#" class="hover:text-text-primary" data-page="fuentes">Fuentes</a>
            </div>
        </nav>
    </header>

    <main class="flex-grow container mx-auto px-6 py-8">
        
        <section id="page-home" class="page-content active">
            <div class="grid lg:grid-cols-2 gap-16 items-center min-h-[60vh]">
                <div class="text-center lg:text-left">
                    <h1 class="text-4xl lg:text-5xl font-bold text-gray-800 mb-4 leading-tight">
                        Transforma tu manera de estudiar.
                    </h1>
                    <p class="text-lg text-gray-600 mb-8 max-w-lg mx-auto lg:mx-0">
                        Skemia te ofrece todas las herramientas que necesitas en un solo lugar. Flashcards, quizzes, mapas mentales y más, diseñados para un aprendizaje sin distracciones.
                    </p>
                    <a href="#" id="start-studying-btn" class="inline-block bg-brand-accent text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:bg-opacity-90 transition-transform transform hover:scale-105">
                        Empezar a estudiar
                    </a>
                </div>
                <div class="hidden lg:block p-4">
                    <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
                        <defs>
                            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style="stop-color:rgb(230, 230, 250);stop-opacity:1" />
                                <stop offset="100%" style="stop-color:rgb(200, 200, 240);stop-opacity:1" />
                            </linearGradient>
                        </defs>
                        <path fill="url(#grad1)" d="M48.8,-63.9C63.2,-53.9,74.7,-40.1,79.8,-24.1C84.9,-8.1,83.6,10.2,75.4,24.3C67.2,38.5,52.1,48.6,37,56.5C21.9,64.4,6.9,70.1,-8.5,70.9C-24,71.7,-39.9,67.6,-51.9,58.3C-63.9,49,-72,34.5,-75.8,18.5C-79.6,2.5,-79.1,-15,-71.5,-29.4C-64,-43.8,-49.4,-55.1,-34.5,-63.7C-19.6,-72.3,-4.5,-78.2,10,-79.4C24.5,-80.6,34.5,-73.9,48.8,-63.9Z" transform="translate(100 100)" />
                        <circle cx="150" cy="50" r="10" fill="#5F476B"/>
                        <circle cx="60" cy="160" r="5" fill="#5F476B" opacity="0.7"/>
                        <rect x="40" y="40" width="20" height="20" rx="5" fill="#5F476B" opacity="0.5" transform="rotate(45 50 50)"/>
                    </svg>
                </div>
            </div>
        </section>

        <section id="page-flashcards" class="page-content">
          <div class="flex flex-col items-center space-y-8">
              <div class="w-full max-w-2xl text-center">
                  <h1 class="text-3xl font-bold mb-4">Flashcards</h1>
                  <div id="flashcard-selection-area" class="w-full max-w-2xl mx-auto text-left">
                      <label class="block text-sm font-medium text-text-secondary mb-1">Selecciona uno o más temarios:</label>
                      <div class="relative" id="multi-select-container">
                          <button id="multi-select-button" class="w-full bg-white p-2 border border-neutral-border rounded-md flex justify-between items-center text-left">
                              <span id="multi-select-text" class="text-text-secondary">Selecciona temarios...</span>
                              <i data-lucide="chevron-down" class="w-5 h-5"></i>
                          </button>
                          <div id="multi-select-dropdown" class="absolute hidden w-full mt-1 bg-white border rounded-md shadow-lg z-20 max-h-60 overflow-y-auto multi-select-dropdown">
                              </div>
                      </div>
                      <div class="flex items-center space-x-4 mt-4">
                          <button id="start-flashcards-btn" class="flex-grow px-6 py-2 bg-brand-accent text-white rounded-md hover:bg-opacity-90 disabled:bg-gray-300">
                              Empezar Estudio
                          </button>
                           <button id="flashcard-shuffle" title="Barajar tarjetas antes de empezar" class="shuffle-btn p-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-colors">
                               <i data-lucide="shuffle" class="w-5 h-5"></i>
                           </button>
                      </div>
                  </div>
              </div>

              <div id="flashcard-study-area" class="hidden w-full max-w-2xl flex flex-col items-center space-y-8">
                  <div class="w-full flex justify-between items-center">
                          <button id="change-topics-btn" class="text-sm text-indigo-600 hover:underline">Cambiar Temas</button>
                          <button id="flashcard-shuffle-study" title="Re-barajar mazo y reiniciar" class="shuffle-btn p-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-colors">
                               <i data-lucide="shuffle" class="w-5 h-5"></i>
                          </button>
                  </div>
                  <div id="flashcard-container" class="w-full max-w-2xl"></div>
                  <div id="flashcard-difficulty-controls" class="w-full max-w-2xl p-4 bg-neutral-card border rounded-lg text-center">
                       <p class="text-sm text-text-secondary mb-3">¿Qué tal te sabes esta tarjeta?</p>
                       <div class="flex justify-center space-x-3">
                              <button data-difficulty="hard" class="flex-1 px-4 py-2 bg-red-100 text-red-700 border border-red-200 rounded-md hover:bg-red-200 transition-colors">Difícil</button>
                              <button data-difficulty="medium" class="flex-1 px-4 py-2 bg-yellow-100 text-yellow-700 border border-yellow-200 rounded-md hover:bg-yellow-200 transition-colors">Medio</button>
                              <button data-difficulty="easy" class="flex-1 px-4 py-2 bg-green-100 text-green-700 border border-green-200 rounded-md hover:bg-green-200 transition-colors">Fácil</button>
                       </div>
                  </div>
                  <div class="flex items-center space-x-4">
                      <button id="flashcard-prev" class="px-4 py-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-transform transform hover:scale-105">Anterior</button>
                      <button id="flashcard-download" title="Descargar mazo completo en PDF" class="px-4 py-2 bg-brand-accent text-white rounded-md hover:bg-opacity-90 transition-transform transform hover:scale-105 flex items-center space-x-2 text-sm">
                          <i data-lucide="download" class="w-4 h-4"></i>
                          <span>Descargar Mazo (PDF)</span>
                      </button>
                      <span id="flashcard-counter" class="text-text-secondary"></span>
                      <button id="flashcard-next" class="px-4 py-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-transform transform hover:scale-105">Siguiente</button>
                  </div>
              </div>
          </div>
        </section>

        <section id="page-quizzes" class="page-content">
          <div class="flex flex-col items-center space-y-8">
              <div class="w-full max-w-2xl text-center">
                  <h1 class="text-3xl font-bold mb-4">Quizzes</h1>
                  <div id="quiz-selection-area" class="w-full max-w-2xl mx-auto text-left">
                      <label class="block text-sm font-medium text-text-secondary mb-1">Selecciona uno o más temarios:</label>
                      <div class="relative" id="quiz-multi-select-container">
                          <button id="quiz-multi-select-button" class="w-full bg-white p-2 border border-neutral-border rounded-md flex justify-between items-center text-left">
                              <span id="quiz-multi-select-text" class="text-text-secondary">Selecciona temarios...</span>
                              <i data-lucide="chevron-down" class="w-5 h-5"></i>
                          </button>
                          <div id="quiz-multi-select-dropdown" class="absolute hidden w-full mt-1 bg-white border rounded-md shadow-lg z-20 max-h-60 overflow-y-auto multi-select-dropdown">
                              </div>
                      </div>
                      <div class="flex items-center space-x-4 mt-4">
                          <button id="start-quiz-btn" class="flex-grow px-6 py-2 bg-brand-accent text-white rounded-md hover:bg-opacity-90 disabled:bg-gray-300">
                              Empezar Quiz
                          </button>
                           <button id="quiz-shuffle-selection" title="Barajar preguntas" class="shuffle-btn p-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-colors">
                               <i data-lucide="shuffle" class="w-5 h-5"></i>
                           </button>
                      </div>
                  </div>
              </div>

              <div id="quiz-study-area" class="hidden w-full max-w-2xl flex-col items-center space-y-8">
                       <div class="w-full flex justify-between items-center">
                              <button id="change-quiz-topics-btn" class="text-sm text-indigo-600 hover:underline">Cambiar Temas</button>
                              <button id="quiz-shuffle-study" title="Reiniciar y barajar" class="shuffle-btn p-2 bg-neutral-card border rounded-md hover:bg-neutral-bg transition-colors">
                                  <i data-lucide="shuffle" class="w-5 h-5"></i>
                              </button>
                       </div>
                       <div id="quiz-container" class="w-full">
                           </div>
              </div>
          </div>
        </section>

        <section id="page-mindmap" class="page-content">
             <div class="max-w-2xl mx-auto text-center">
                 <h1 class="text-3xl font-bold mb-4">Mapas Mentales</h1>
                 <div class="mb-6">
                     <label for="mindmap-temario-select" class="block text-sm font-medium text-text-secondary mb-1">Selecciona un temario:</label>
                     <select id="mindmap-temario-select" class="temario-selector w-full p-2 border border-neutral-border rounded-md bg-white"></select>
                 </div>
                 <div id="mindmap-url-container"></div>
             </div>
        </section>

        <section id="page-audios" class="page-content">
             <div class="max-w-2xl mx-auto text-center">
                 <h1 class="text-3xl font-bold mb-4">Audios Descargables</h1>
                 <div id="audios-download-container">
                     </div>
             </div>
        </section>

        <section id="page-report" class="page-content">
            <div class="max-w-2xl mx-auto text-center">
                <h1 class="text-3xl font-bold mb-4">Informes Descargables</h1>
                <div id="report-download-container">
                    </div>
            </div>
        </section>

        <section id="page-fuentes" class="page-content">
             <div class="max-w-2xl mx-auto text-center">
                 <h1 class="text-3xl font-bold mb-4">Fuentes de Información</h1>
                 <div id="fuentes-download-container">
                     </div>
             </div>
        </section>
    </main>
    
    <footer class="text-center py-4 text-text-secondary text-sm border-t border-neutral-border mt-8">
        © <span id="footer-year"></span> Skemia. Herramienta educativa.
    </footer>

    <script>
    // Aseguramos que la librería jspdf esté disponible globalmente (ya cargada en el <head>)
    const { jsPDF } = window.jspdf;

    document.addEventListener('DOMContentLoaded', async () => {

        let MOCK_DATA;

        // --- CARGA DE DATOS ---
        try {
            const response = await fetch('datos.json');
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            MOCK_DATA = await response.json();
        } catch (error) {
            console.error("Error crítico: No se pudieron cargar los datos de la aplicación.", error);
            document.querySelector('main').innerHTML = `
                <div class="text-center p-8 bg-red-50 border border-red-200 rounded-lg">
                    <h1 class="text-2xl font-bold text-red-700">Error al Cargar Contenido</h1>
                    <p class="text-gray-600 mt-2">No se pudo obtener la información necesaria para la aplicación. Por favor, revisa la consola de desarrollador (F12) o intenta recargar la página.</p>
                </div>`;
            return;
        }
        
        // --- INICIO DE LA LÓGICA DE VISIBILIDAD CONDICIONAL ---
        function actualizarVisibilidadUI(data) {
            // Seleccionamos todos los enlaces de navegación que tienen el atributo 'data-page'
            const navLinks = document.querySelectorAll('nav a[data-page]');

            // Creamos un objeto para definir las reglas de visibilidad de cada sección
            const reglasVisibilidad = {
                'flashcards': data.temarios && data.temarios.some(t => t.flashcards && t.flashcards.length > 0),
                'quizzes': data.temarios && data.temarios.some(t => t.quizzes && t.quizzes.length > 0),
                'mindmap': data.temarios && data.temarios.some(t => t.mindmapUrl),
                'audios': !!data.allAudiosUrl,
                'report': !!data.allReportsUrl,
                'fuentes': !!data.allFuentesUrl
            };

            // Recorremos cada enlace de navegación
            navLinks.forEach(link => {
                const page = link.dataset.page;
                // Si la página no es 'home' y su regla de visibilidad es 'false', ocultamos el enlace
                if (page !== 'home' && !reglasVisibilidad[page]) {
                    link.style.display = 'none';
                }
            });
        }
        
        // Ejecutamos la función de visibilidad justo después de cargar los datos
        actualizarVisibilidadUI(MOCK_DATA);
        // --- FIN DE LA LÓGICA DE VISIBILIDAD CONDICIONAL ---


        // --- ESTADO Y LÓGICA DE LA APLICACIÓN ---
        // (El resto de tu código JavaScript permanece aquí, sin cambios)
        
        let AppState = {
            currentTemarioIndex: 0,
            flashcards: {
                selectedTemarioIndices: [],
                combinedFlashcards: [],
                currentIndex: 0,
                isFlipped: false,
                isShuffled: false,
                originalOrder: [],
                shuffledOrder: [],
                difficulty: {}
            },
            quizzes: {
                selectedTemarioIndices: [],
                combinedQuizzes: [],
                currentIndex: 0,
                selectedAnswer: null,
                isAnswered: false,
                score: 0,
                userAnswers: [],
                isReviewMode: false,
                isEarlyFinish: false, 
            }
        };

        const pages = document.querySelectorAll('.page-content');
        const navLinks = document.querySelectorAll('nav a');
        const temarioSelectors = document.querySelectorAll('.temario-selector');
        document.getElementById('footer-year').textContent = new Date().getFullYear();

        function navigateTo(pageId) {
            pages.forEach(page => page.classList.toggle('active', page.id === `page-${pageId}`));
            const activePage = document.querySelector('.page-content.active');
            if (activePage) {
                const pageLogic = activePage.id.replace('page-', '');
                if (pageLogic === 'flashcards') setupFlashcardsPage();
                if (pageLogic === 'quizzes') setupQuizzesPage();
                if (pageLogic === 'mindmap') renderMindmapPage();
                if (pageLogic === 'audios') renderDownloadPage('audios');
                if (pageLogic === 'report') renderDownloadPage('report');
                if (pageLogic === 'fuentes') renderDownloadPage('fuentes');
            }
        }

        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                navigateTo(e.currentTarget.dataset.page);
            });
        });
        
        function populateTemarioSelectors() {
            temarioSelectors.forEach(selector => {
                selector.innerHTML = '';
                MOCK_DATA.temarios.forEach((temario, index) => {
                    selector.innerHTML += `<option value="${index}">${temario.name}</option>`;
                });
                selector.value = AppState.currentTemarioIndex;
            });
        }

        function handleTemarioChange(event) {
            const newIndex = parseInt(event.target.value, 10);
            AppState.currentTemarioIndex = newIndex;
            temarioSelectors.forEach(s => s.value = newIndex);
            const activePageId = document.querySelector('.page-content.active').id.replace('page-', '');
            navigateTo(activePageId);
        }
        
        document.querySelectorAll('.temario-selector').forEach(selector => 
            selector.addEventListener('change', handleTemarioChange)
        );
        
        document.getElementById('start-studying-btn').addEventListener('click', (e) => {
            e.preventDefault();
            navigateTo('flashcards');
        });

        // --- MÓDULO DE FLASHCARDS ---
        const fcSelectionArea = document.getElementById('flashcard-selection-area');
        const fcStudyArea = document.getElementById('flashcard-study-area');
        const startFlashcardsBtn = document.getElementById('start-flashcards-btn');
        const fcContainer = document.getElementById('flashcard-container');
        const fcPrevBtn = document.getElementById('flashcard-prev');
        const fcNextBtn = document.getElementById('flashcard-next');
        const fcCounter = document.getElementById('flashcard-counter');
        const fcShuffleBtn = document.getElementById('flashcard-shuffle');
        const fcShuffleStudyBtn = document.getElementById('flashcard-shuffle-study');
        const fcDownloadBtn = document.getElementById('flashcard-download');
        const fcDifficultyControls = document.getElementById('flashcard-difficulty-controls');
        const changeTopicsBtn = document.getElementById('change-topics-btn');

        function setupFlashcardsPage() {
            setupMultiSelect('flashcards');
            fcSelectionArea.classList.remove('hidden');
            fcStudyArea.classList.add('hidden', 'flex');
        }

        startFlashcardsBtn.addEventListener('click', () => {
            fcSelectionArea.classList.add('hidden');
            fcStudyArea.classList.remove('hidden');
            fcStudyArea.classList.add('flex');
            
            resetFlashcardState();
            
            let combined = [];
            AppState.flashcards.selectedTemarioIndices.forEach(index => {
                combined.push(...MOCK_DATA.temarios[index].flashcards);
            });
            
            if (fcShuffleBtn.classList.contains('active')) {
                for (let i = combined.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [combined[i], combined[j]] = [combined[j], combined[i]];
                }
            }
            
            AppState.flashcards.combinedFlashcards = combined;
            renderFlashcard();
        });

        changeTopicsBtn.addEventListener('click', () => setupFlashcardsPage());

        function resetFlashcardState() {
             AppState.flashcards = {
                 ...AppState.flashcards,
                 combinedFlashcards: [],
                 currentIndex: 0,
                 isFlipped: false,
                 originalOrder: [],
                 shuffledOrder: [],
                 difficulty: {}
             };
        }

        function shuffleAndRestartFlashcards() {
            const state = AppState.flashcards;
            const combined = state.combinedFlashcards;

            if (combined.length === 0) return;

            for (let i = combined.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [combined[i], combined[j]] = [combined[j], combined[i]];
            }
            
            state.currentIndex = 0;
            state.isFlipped = false;
            
            if(fcShuffleStudyBtn) {
                fcShuffleStudyBtn.classList.add('active');
                setTimeout(() => fcShuffleStudyBtn.classList.remove('active'), 300);
            }

            renderFlashcard();
        }

        if (fcShuffleStudyBtn) {
             fcShuffleStudyBtn.addEventListener('click', shuffleAndRestartFlashcards);
        }

        function addSkemiaHeader(doc, title) {
            const margin = 10;
            const lineHeight = 6;
            let y = 15;
            const logoText = "Skemia";
            const pageWidth = doc.internal.pageSize.getWidth();
            const logoWidth = doc.getStringUnitWidth(logoText) * doc.internal.getFontSize() / doc.internal.scaleFactor;
            const titleFontSize = 14;

            doc.setFontSize(20);
            doc.setFont("helvetica", "bold");
            doc.setTextColor("#5F476B");
            doc.text(logoText, margin, y);
            
            doc.setFontSize(titleFontSize);
            doc.setTextColor(0);
            doc.setFont("helvetica", "bold");
            
            const fullTitle = title;
            const titleWidth = doc.getStringUnitWidth(fullTitle) * titleFontSize / doc.internal.scaleFactor;
            const maxTitleWidth = pageWidth - margin * 2;

            const logoEnd = margin + logoWidth;
            const titleStartX = logoEnd + 5; 
            const availableWidthForTitle = pageWidth - titleStartX - margin;
            
            if (doc.getStringUnitWidth(fullTitle) * titleFontSize / doc.internal.scaleFactor > availableWidthForTitle) {
                const splitTitle = doc.splitTextToSize(fullTitle, availableWidthForTitle);
                doc.text(splitTitle, titleStartX, y, { align: 'left' });
                y += splitTitle.length * lineHeight;
            } else {
                const centerPoint = titleStartX + (availableWidthForTitle / 2);
                doc.text(fullTitle, centerPoint, y, { align: 'center' });
                y += lineHeight;
            }

            doc.setFontSize(8);
            doc.setFont("helvetica", "normal");
            doc.setTextColor(150);
            doc.text("Este material es propiedad exclusiva de Skemia. La difusión, reproducción o distribución sin autorización expresa está prohibida.", margin, y);
            y += lineHeight;

            doc.line(margin, y, 200, y);
            y += lineHeight + 5;
            return y;
        }

        function downloadFlashcardsAsPDF() {
            if (AppState.flashcards.combinedFlashcards.length === 0) {
                alert("No hay tarjetas para descargar. Selecciona un temario e inicia el estudio.");
                return;
            }

            const doc = new jsPDF();
            const cards = AppState.flashcards.combinedFlashcards;
            
            const margin = 10;
            const lineHeight = 7;
            const maxWidth = 180;
            const titleFontSize = 14;
            const textFontSize = 10;

            const selectedTopicNames = AppState.flashcards.selectedTemarioIndices
                .map(index => MOCK_DATA.temarios[index].name)
                .join(', ');
            
            let y = addSkemiaHeader(doc, `Mazo de Flashcards: ${selectedTopicNames}`);

            doc.setFont("helvetica", "normal");

            cards.forEach((card, index) => {
                if (y > 280) {
                    doc.addPage();
                    y = addSkemiaHeader(doc, `Mazo de Flashcards: ${selectedTopicNames} (Cont.)`);
                }

                doc.setFontSize(titleFontSize);
                doc.setFont("helvetica", "bold");
                doc.text(`Tarjeta ${index + 1}:`, margin, y);
                y += lineHeight;

                doc.setFontSize(textFontSize);
                doc.setFont("helvetica", "bold");
                doc.text("P: ", margin + 5, y); 
                
                doc.setFont("helvetica", "normal");
                const frontLines = doc.splitTextToSize(card.front, maxWidth - 10);
                doc.text(frontLines, margin + 10, y);
                y += (frontLines.length * lineHeight) + 2;

                doc.setFontSize(textFontSize);
                doc.setFont("helvetica", "bold");
                doc.text("R: ", margin + 5, y); 

                doc.setFont("helvetica", "normal");
                const backLines = doc.splitTextToSize(card.back, maxWidth - 10);
                doc.text(backLines, margin + 10, y);
                y += (backLines.length * lineHeight) + lineHeight / 2;
                
                doc.line(margin, y, 200, y);
                y += lineHeight;
            });

            const firstTopicName = MOCK_DATA.temarios[AppState.flashcards.selectedTemarioIndices[0]]?.name || 'Mazo';
            const fileName = `Skemia_Flashcards_${firstTopicName.replace(/[^\w\s]/gi, '').slice(0, 30).trim().replace(/\s/g, '_')}.pdf`;
            
            doc.save(fileName);
        }

        if (fcDownloadBtn) {
            fcDownloadBtn.addEventListener('click', downloadFlashcardsAsPDF);
        }

        function renderFlashcard() {
            const state = AppState.flashcards;
            const currentData = state.combinedFlashcards;
            
            if (currentData.length === 0) {
                 fcContainer.innerHTML = `<div class="w-full h-80 flex items-center justify-center"><p class="text-text-secondary">No hay flashcards en los temarios seleccionados.</p></div>`;
                 fcCounter.textContent = '0 / 0';
                 fcDifficultyControls.style.display = 'none';
                 fcPrevBtn.disabled = true;
                 fcNextBtn.disabled = true;
                 fcDownloadBtn.disabled = true;
                 return;
            } else {
                 fcDifficultyControls.style.display = 'block';
                 fcPrevBtn.disabled = false;
                 fcNextBtn.disabled = false;
                 fcDownloadBtn.disabled = false;
            }

            if (state.originalOrder.length === 0) {
                 state.originalOrder = currentData.map((_, index) => index);
            }
            const card = currentData[state.currentIndex];
            
            const difficulty = state.difficulty[card.id];
            let borderColor = 'border-neutral-border';
            if (difficulty === 'easy') borderColor = 'border-green-400';
            else if (difficulty === 'medium') borderColor = 'border-yellow-400';
            else if (difficulty === 'hard') borderColor = 'border-red-400';

            fcContainer.innerHTML = `
                <div id="card-flipper" class="w-full h-80 rounded-xl shadow-xl cursor-pointer perspective-1000">
                    <div class="relative w-full h-full transition-transform duration-700 transform-style-3d ${state.isFlipped ? 'rotate-y-180' : ''}">
                        <div class="absolute w-full h-full backface-hidden flex flex-col items-center justify-center p-6 bg-white border-4 ${borderColor} rounded-xl">
                            <p class="text-2xl font-semibold text-text-primary text-center">${card.front}</p>
                            <div class="absolute bottom-4 right-4 text-gray-300"><i data-lucide="rotate-cw" class="w-5 h-5"></i></div>
                        </div>
                        <div class="absolute w-full h-full backface-hidden rotate-y-180 flex flex-col items-center justify-center p-6 bg-neutral-bg border-4 ${borderColor} rounded-xl">
                            <p class="text-lg text-text-secondary text-center">${card.back}</p>
                            ${card.audioUrl ? `<audio controls src="${card.audioUrl}" class="mt-4" onclick="event.stopPropagation()"></audio>` : ''}
                        </div>
                    </div>
                </div>`;
            fcCounter.textContent = `${state.currentIndex + 1} / ${currentData.length}`;
            document.getElementById('card-flipper').addEventListener('click', () => {
                state.isFlipped = !state.isFlipped;
                renderFlashcard();
            });
            lucide.createIcons();
        }
        
        fcPrevBtn.addEventListener('click', () => {
            const state = AppState.flashcards;
            const dataLength = state.combinedFlashcards.length;
            if (dataLength === 0) return;
            state.isFlipped = false;
            state.currentIndex = (state.currentIndex - 1 + dataLength) % dataLength;
            renderFlashcard();
        });
        
        fcNextBtn.addEventListener('click', () => {
            const state = AppState.flashcards;
            const dataLength = state.combinedFlashcards.length;
            if (dataLength === 0) return;
            state.isFlipped = false;
            state.currentIndex = (state.currentIndex + 1) % dataLength;
            renderFlashcard();
        });
        
        fcShuffleBtn.addEventListener('click', () => {
            fcShuffleBtn.classList.toggle('active');
        });

        fcDifficultyControls.addEventListener('click', (e) => {
            if (e.target.matches('button')) {
                const difficulty = e.target.dataset.difficulty;
                const state = AppState.flashcards;
                const card = state.combinedFlashcards[state.currentIndex];
                if (!card) return;
                
                state.difficulty[card.id] = difficulty;
                renderFlashcard();
                setTimeout(() => fcNextBtn.click(), 200);
            }
        });

        // --- MÓDULO DE QUIZZES ---
        // (El resto de tu código para Quizzes, Descargas, etc. va aquí sin cambios)

        // --- INICIALIZACIÓN ---
        populateTemarioSelectors();
        navigateTo('home');
        lucide.createIcons();
    });
    </script>
</body>
</html>
